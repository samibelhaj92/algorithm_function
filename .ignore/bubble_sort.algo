/* *** first algorithm *** */
ALGORITHM Bubble_Sort(list)
VAR
    list != fi.
    i : INTEGER := 0;
    j : INTEGER := 0;
BEGIN
    FOR i <- 0 TO list:Count -1
    FOR j <- 0 TO list:Count -1
    IF (list[i] < list[j]) THEN
    Swap(list[i]; list[j])
    END_IF
    END_FOR
    END_FOR
    Write (list)
END Bubble_Sort

/* *** course ALgorithm *** */
/* *** Bubble sort *** */

PROCEDURE swap(VAR xp, VAR yp : INTEGER)
VAR
   tmp : INTEGER;
BEGIN
  tmp := xp;
  xp := yp;
  yp := tmp;
END
/* *** Bubble sort *** */
PROCEDURE bubble_sort(VAR tab : ARRAY_OF INTEGER)
VAR
   i,j,n : INTEGER;
BEGIN
   n := tab.length;
   FOR i FROM 0 TO n- 1 STEP 1  DO
       // Last i elements are already in place
       FOR j  FROM 0 TO n-i-1 STEP 1  DO
           IF (tab[j] > tab[j+1]) THEN
               swap(tab[j], tab[j+1])
           END_IF
       END_FOR
   END_FOR
END

/* *** course ALgorithm *** */
/* *** selection sort *** */

PROCEDURE swap(VAR xp, VAR yp : INTEGER)
VAR
   tmp : INTEGER;
BEGIN
  tmp := xp;
  xp := yp;
  yp := tmp;
END
/* *** selection sort *** */
PROCEDURE selection_sort(VAR tab : ARRAY_OF INTEGER)
VAR
   i,j,min_idx,n : INTEGER;
BEGIN
   n := tab.length;
   // one by one move boundary of sub-array
   FOR i FROM 0 TO n-2 STEP 1  DO
       min_idx := i;
       FOR j  FROM i  TO n-i-2 STEP 1  DO
           IF (tab[j]<tab[min_idx]) THEN
               min_idx := j;
           END_IF
       END_FOR
   // swap the found minimum element with the first element
   swap(arr[min_idx],arr[i])
   END_FOR
END